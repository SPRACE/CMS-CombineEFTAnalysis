/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooAbsData.h"
#include "HiggsAnalysis/CombinedLimit/interface/Roo1DSemiAnalyticPdf.h" 

#include <math.h> 
#include "TMath.h" 
#include "RooFormulaVar.h"
#include "RooRealVar.h"
#include "RooFit.h"
#include "TFile.h"

#include <iostream>

//using namespace RooFit ;

ClassImp(Roo1DSemiAnalyticPdf)

Roo1DSemiAnalyticPdf::Roo1DSemiAnalyticPdf()
{
  initializeProfiles();
}

Roo1DSemiAnalyticPdf::Roo1DSemiAnalyticPdf(const char *name, 
					   const char *title, 
					   RooAbsReal& _x,
					   RooAbsReal& _operator1,
					   RooAbsReal& _SM_shape,
					   const char * parFilename):
  RooAbsPdf(name,title),

  x("observable","observable",this,_x),
  operator1("operator1","operator1",this,_operator1),
  SM_shape("SM_shape","SM_shape",this,_SM_shape),
  profileFilename(parFilename)

{ 
  const RooRealVar& rdep = dynamic_cast<const RooRealVar&>(_x);
  initializeBins(rdep);
  initializeProfiles();
  initializeNormalization(std::string(""),_x,_SM_shape);


   TFile *f = TFile::Open(parFilename,"READ");  
   readProfiles(f);
   f->Close();
} 

Roo1DSemiAnalyticPdf::Roo1DSemiAnalyticPdf(const Roo1DSemiAnalyticPdf& other, 
							     const char* name) :  
  RooAbsPdf(other,name),
  x("observable",this,other.x),
  operator1("operator1",this,other.operator1),
  SM_shape("SM_shape",this,other.SM_shape),
  integral_basis(other.integral_basis),
  bins(other.bins),
  profileFilename(other.profileFilename)
{ 
  initializeProfiles();
  initializeBins(x.arg());
  TFile *f = TFile::Open(profileFilename,"READ");  
  readProfiles(f);
  f->Close();
} 

void Roo1DSemiAnalyticPdf::initializeProfiles() {

  p0.clear();
  p1.clear();
  p2.clear();
  
}


void Roo1DSemiAnalyticPdf::initializeBins(const RooAbsReal& dep) const {

  bins.clear();
  const RooRealVar& rdep = dynamic_cast<const RooRealVar&>(dep);
  int N_bins=rdep.getBinning("").numBoundaries();
  double* array = rdep.getBinning("").array();
  for(int i=0; i<N_bins; ++i) {
    bins.push_back(array[i]);
  }
  
}


void Roo1DSemiAnalyticPdf::initializeNormalization(const std::string& rName,
						   const RooAbsReal& dep,
						   const RooAbsReal& shape) const {
  integral_basis.clear();

  int N_bins=bins.size()-1;
  int i;

  for(i=0; i<N_bins; ++i) {

    Double_t bin_low=bins[i];
    Double_t bin_high=bins[i+1];

    const RooRealVar& rdep = dynamic_cast<const RooRealVar&>(dep);
    RooRealVar& b = const_cast<RooRealVar&>(rdep);
    const string intRange="integRange";
    b.setRange((const char*)intRange.c_str(),bin_low,bin_high); 
    RooAbsReal* integral = shape.createIntegral(RooArgSet(rdep),RooArgSet(),(const char*)intRange.c_str());
    integral_basis.push_back(integral->getVal());

    delete integral;

  }


}

void Roo1DSemiAnalyticPdf::readProfiles(TDirectoryFile* dir) const {


  p0.clear(); p1.clear(); p2.clear();
  int N_bins=bins.size()-1;
  for(int i=0; i<N_bins; ++i) {
    TF1* theFcn = (TF1*) dir->Get(TString::Format("bin_function_%i",i));
    p0.push_back(theFcn->GetParameter(0));
    p1.push_back(theFcn->GetParameter(1));
    p2.push_back(theFcn->GetParameter(2));

  }

}

void Roo1DSemiAnalyticPdf::readProfiles(Roo1DSemiAnalyticPdf const& other) {

  p0.clear(); p1.clear(); p2.clear();
  int N_bins=bins.size()-1;
  for (int i = 0; i<N_bins; ++i) {
    p0.push_back(other.p0[i]);
    p1.push_back(other.p1[i]);
    p2.push_back(other.p2[i]);
  }
}

Roo1DSemiAnalyticPdf::~Roo1DSemiAnalyticPdf() {}

Double_t Roo1DSemiAnalyticPdf::evaluate() const 
{ 


  double v1 = operator1;
  double ret = 0.0;

  int N_bins=bins.size()-1;
  int bin_with_x=0;

  for (int idx=0;idx<N_bins;idx++) {     
    if (x<bins[idx+1] && x>bins[idx]) {
      bin_with_x=idx;
      break;
    }
  }


  ret = (p0[bin_with_x] + p1[bin_with_x]*v1 + p2[bin_with_x]*v1*v1)*SM_shape;
 
  if (ret < 0.) ret = 0.;
  return ret; 

}

Int_t Roo1DSemiAnalyticPdf::
getAnalyticalIntegral(RooArgSet& allVars,RooArgSet& analVars, 
		      const char* rangeName) const {  
  if (matchArgs(allVars,analVars,x)) return 1 ;
  return 0 ;
}

Double_t Roo1DSemiAnalyticPdf::
analyticalIntegral(Int_t code, const char* rangeName) const {  

  assert(code==1 && "invalid analytic integration code!");

  double v1(0.0);  
  v1 = operator1;
  
  double ret(0.);

  int N_bins=bins.size()-1;
  for(Int_t i=0 ; i<N_bins ; i++) 
    ret += (p0[i] + p1[i]*v1 + p2[i]*v1*v1)*integral_basis[i];



  return ret;
}
